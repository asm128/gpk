#include "gpk_gui.h"
#include "gpk_gui_text.h"
#include "gpk_base64.h"

// GUI_CONTROL_COLOR_BACKGROUND
// GUI_CONTROL_COLOR_BORDER_LEFT
// GUI_CONTROL_COLOR_BORDER_TOP
// GUI_CONTROL_COLOR_BORDER_RIGHT
// GUI_CONTROL_COLOR_BORDER_BOTTOM
// GUI_CONTROL_COLOR_TEXT_BACKGROUND
// GUI_CONTROL_COLOR_TEXT_FACE
// GUI_CONTROL_COLOR_MARGIN_LEFT
// GUI_CONTROL_COLOR_MARGIN_TOP
// GUI_CONTROL_COLOR_MARGIN_RIGHT
// GUI_CONTROL_COLOR_MARGIN_BOTTOM
// GUI_CONTROL_COLOR_CORNER_LEFT_TOP_TOP
// GUI_CONTROL_COLOR_CORNER_LEFT_TOP_LEFT
// GUI_CONTROL_COLOR_CORNER_RIGHT_TOP_TOP
// GUI_CONTROL_COLOR_CORNER_RIGHT_TOP_RIGHT
// GUI_CONTROL_COLOR_CORNER_LEFT_BOTTOM_LEFT
// GUI_CONTROL_COLOR_CORNER_LEFT_BOTTOM_BOTTOM
// GUI_CONTROL_COLOR_CORNER_RIGHT_BOTTOM_RIGHT
// GUI_CONTROL_COLOR_CORNER_RIGHT_BOTTOM_BOTTOM
// GUI_CONTROL_COLOR_CLIENT

																gpk::SGUI::SGUI												()	{
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_NORMAL				]	= Palettes.push_back({{::gpk::BLUE		, ::gpk::GRAY	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_DISABLED			]	= Palettes.push_back({{::gpk::LIGHTGRAY	, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::LIGHTGRAY * 1.1	,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_HOVER				]	= Palettes.push_back({{::gpk::CYAN		, ::gpk::YELLOW	, ::gpk::MAGENTA, ::gpk::GREEN, ::gpk::ORANGE, {}, ::gpk::DARKCYAN / 2.0	,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_PRESSED			]	= Palettes.push_back({{::gpk::RED		, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_SELECTED			]	= Palettes.push_back({{::gpk::ORANGE	, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_SELECTED_DISABLED	]	= Palettes.push_back({{::gpk::BLUE		, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_SELECTED_HOVER		]	= Palettes.push_back({{::gpk::BLUE		, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_SELECTED_PRESSED	]	= Palettes.push_back({{::gpk::BLUE		, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_EXECUTE			]	= Palettes.push_back({{::gpk::BLUE		, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
	DefaultColors[::gpk::GUI_CONTROL_PALETTE_OUTDATED			]	= Palettes.push_back({{::gpk::BLUE		, ::gpk::ORANGE	, ::gpk::YELLOW, ::gpk::MAGENTA, ::gpk::CYAN, {}, ::gpk::WHITE				,}});
}

			::gpk::error_t										gpk::controlInvalid										(const ::gpk::SGUI& gui, int32_t iControl)				{
	if(gui.Controls.Controls.size() <= uint32_t(iControl)	) return -1;
	if(gui.Controls.States[iControl].Unused					) return -1;
	return 0;
}

static		::gpk::error_t										paletteSetupDefault										(::gpk::array_pod<::gpk::SColorBGRA>& palette, const ::gpk::view_array<const ::gpk::SColorBGRA>& colors, uint32_t iShades)	{
	const uint32_t														newPaletteSize											= colors.size() * iShades;
	if(palette.size() < newPaletteSize)
		gpk_necall(palette.resize(newPaletteSize), "%s", "Out of memory?");
	for(uint32_t iTone = 0; iTone < colors.size(); ++iTone)
		palette[iTone * iShades]										= colors[iTone];

	for(uint32_t iShade = 0; iShade < iShades; ++iShade) {
		const ::gpk::SColorBGRA												& baseColor												= palette[iShade * iShades];
		::gpk::SColorBGRA													& paletteItem											= palette[iShade];
		paletteItem														= baseColor;
	}

	for(uint32_t iTone = 1; iTone < colors.size(); ++iTone)
		for(uint32_t iShade = 0; iShade < iShades; ++iShade) {
			if(0 == (iShade % iShades))
				continue;
			const int32_t														toneIndex												= iTone * iShades;
			const ::gpk::SColorBGRA												& baseColor												= colors[iTone];
			::gpk::SColorBGRA													& paletteItem											= palette[toneIndex + iShade];
			paletteItem														= ::gpk::SColorFloat(baseColor) / (float)iShades * (iShades - (float)iShade);
			verbose_printf("Original color: {r: 0x%X, g: 0x%X, b: 0x%X}.", baseColor	.r, baseColor	.g, baseColor	.b);
			verbose_printf("Shaded color  : {r: 0x%X, g: 0x%X, b: 0x%X}.", paletteItem	.r, paletteItem	.g, paletteItem	.b);
		}

	return 0;
}

static		::gpk::error_t										themeSetupDefault										(const ::gpk::array_pod<::gpk::SColorBGRA>& palette, int32_t iColor, ::gpk::SControlTheme& theme, uint32_t iShades)	{
	::gpk::array_static<uint32_t, ::gpk::GUI_CONTROL_COLOR_COUNT>		& colorComboDisabled									= theme.ColorCombos[::gpk::GUI_CONTROL_PALETTE_DISABLED	]	= {};
	::gpk::array_static<uint32_t, ::gpk::GUI_CONTROL_COLOR_COUNT>		& colorComboPressed 									= theme.ColorCombos[::gpk::GUI_CONTROL_PALETTE_PRESSED	]	= {};
	::gpk::array_static<uint32_t, ::gpk::GUI_CONTROL_COLOR_COUNT>		& colorComboSelected									= theme.ColorCombos[::gpk::GUI_CONTROL_PALETTE_SELECTED	]	= {};
	::gpk::array_static<uint32_t, ::gpk::GUI_CONTROL_COLOR_COUNT>		& colorComboHover 										= theme.ColorCombos[::gpk::GUI_CONTROL_PALETTE_HOVER	]	= {};
	::gpk::array_static<uint32_t, ::gpk::GUI_CONTROL_COLOR_COUNT>		& colorComboNormal										= theme.ColorCombos[::gpk::GUI_CONTROL_PALETTE_NORMAL	]	= {};

	//const int32_t														colorBase												= iColor / iShades;
	const int32_t														colorShade												= iColor % iShades;
	const int32_t														colorText												= (::gpk::ASCII_COLOR_WHITE * iShades);

	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BACKGROUND	]	= iColor;//(colorShade > 7) ? iColor : iColor;
	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BORDER_LEFT	]	= (colorShade > 7) ? iColor - 1 : iColor + 1;
	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BORDER_TOP	]	= (colorShade > 7) ? iColor - 1 : iColor + 1;
	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BORDER_RIGHT	]	= (colorShade > 7) ? iColor - 1 : iColor + 1;
	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BORDER_BOTTOM	]	= (colorShade > 7) ? iColor - 1 : iColor + 1;
	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_TEXT_FACE		]	= (colorShade > 7) ? iColor - 3 : iColor + 3;
//
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_BACKGROUND	]	= iColor;//(colorShade > 7) ? iColor : iColor;
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_BORDER_LEFT	]	= (colorShade > 7) ? iColor - 3 : iColor + 3;
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_BORDER_TOP	]	= (colorShade > 7) ? iColor - 3 : iColor + 3;
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_BORDER_RIGHT	]	= (colorShade > 7) ? iColor - 3 : iColor + 3;
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_BORDER_BOTTOM	]	= (colorShade > 7) ? iColor - 3 : iColor + 3;
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_TEXT_FACE		]	= (colorShade > 7) ? colorText + 7 : colorText + 9;
//
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BACKGROUND	]	= (colorShade > 7) ? colorText - 7 : colorText + 9;
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BORDER_LEFT	]	= (colorShade > 7) ? colorText - 7 : colorText + 9;
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BORDER_TOP	]	= (colorShade > 7) ? colorText - 7 : colorText + 9;
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BORDER_RIGHT	]	= (colorShade > 7) ? colorText - 7 : colorText + 9;
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BORDER_BOTTOM	]	= (colorShade > 7) ? colorText - 7 : colorText + 9;
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_TEXT_FACE		]	= (colorShade > 7) ? colorText : colorText + 8;
//
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_BACKGROUND	]	= iColor;//(colorShade > 7) ? iColor : iColor;
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_BORDER_LEFT	]	= (colorShade > 7) ? iColor - 7: iColor + 7;
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_BORDER_TOP	]	= (colorShade > 7) ? iColor - 7: iColor + 7;
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_BORDER_RIGHT	]	= (colorShade > 7) ? iColor - 7: iColor + 7;
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_BORDER_BOTTOM	]	= (colorShade > 7) ? iColor - 7: iColor + 7;
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_TEXT_FACE		]	= (colorShade > 7) ? colorText + 4: colorText + 12;
//
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_BACKGROUND	]	= iColor;//(colorShade > 7) ? iColor : iColor;
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_BORDER_LEFT	]	= (colorShade > 7) ? iColor - 5: iColor + 5;
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_BORDER_TOP	]	= (colorShade > 7) ? iColor - 5: iColor + 5;
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_BORDER_RIGHT	]	= (colorShade > 7) ? iColor - 5: iColor + 5;
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_BORDER_BOTTOM	]	= (colorShade > 7) ? iColor - 5: iColor + 5;
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_TEXT_FACE		]	= (colorShade > 7) ? colorText : colorText + 15;

	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_TEXT_BACKGROUND	]	= colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_CLIENT			]	= colorComboDisabled	[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_TEXT_BACKGROUND	]	= colorComboPressed		[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_CLIENT			]	= colorComboPressed 	[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_TEXT_BACKGROUND	]	= colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboSelected	[::gpk::GUI_CONTROL_COLOR_CLIENT			]	= colorComboSelected	[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_TEXT_BACKGROUND	]	= colorComboHover		[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboHover 	[::gpk::GUI_CONTROL_COLOR_CLIENT			]	= colorComboHover 		[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_TEXT_BACKGROUND	]	= colorComboNormal		[::gpk::GUI_CONTROL_COLOR_BACKGROUND];
	colorComboNormal	[::gpk::GUI_CONTROL_COLOR_CLIENT			]	= colorComboNormal		[::gpk::GUI_CONTROL_COLOR_BACKGROUND];

	for(uint32_t iState = 0; iState < theme.ColorCombos.size(); ++iState)
		for(uint32_t iArea = 0; iArea < ::gpk::GUI_CONTROL_COLOR_COUNT; ++iArea)
			theme.ColorCombos[iState][iArea]							= ::gpk::min((uint32_t)theme.ColorCombos[iState][iArea], palette.size() - 1);
	return 0;
}

static		::gpk::error_t										themeSetupDefault										(const ::gpk::array_pod<::gpk::SColorBGRA>& palette, ::gpk::array_pod<::gpk::SControlTheme>& themes, uint32_t iShades)	{
	for(uint32_t iColor = 0; iColor < palette.size(); ++iColor) {
		const int32_t														indexTheme												= themes.push_back({});
		::gpk::SControlTheme												& theme													= themes[indexTheme];
		::themeSetupDefault(palette, iColor, theme, iShades);
	}
	return 0;
}


struct SB64RasterFont {
	::gpk::SCoord2<uint8_t>			Metrics;
	::gpk::vcs						Base64String;
};

static const ::gpk::SRasterFontBase64		fontsDefault [] =
/*  0*/ { {{ 4, 6}, "AAAApK4E5OoEoO4EQO4E5E4ORE4OAAQA//v/4OoAAAAAwGgGpOQEAAAAxIoE5OoEYm4CyM4I5OQEqgoKvqsKbMoGAAAO5OTk5EQEROQEQE8AIC8AAOIAoK4AQO4A4E4AAAAARAQEqgAA6uoKxMZGgiQIpKwOJgAAJCIEQkQCSk4KQE4AAAAmAA4AAAAEiCQCrKoGZEQOhiQOhoQGqI4ILoYGJKYEjkwEpKQEpIwEAAQEAAQmSEIIAA4OQkgChgQErioOpK4KpqYGLCIMpqoGLiYOLiYCLKoMqq4KTkQOiKgEqqYKIiIO6q4K6qoKpKoEpiYCpOoMpqYKLI4GTkQEqqoOqqoEqu4KqqQKqkQEjiQOJiIGIoQIRkQGpAAAAADwRgAAAKwOIqYGACwMiKwMAG4MSE4EAK7oIqYKBEQEBERkImoKREQEAO4KAKYKAKQEAKYmAKyMACYCAEwGQE4MAKoOAKoEAOoOAEoKAKokAEYMTEYMREQERkwGWgAAQOoALOIkCqoMSG4MpKwOCqwOQqwOBKwO4OJkpG4MCm4MQm4MCkQEpEAEQkAESuoKROoKSG4OAOwGbG4OpKQECqQEQqQEpKAOQqoOCqokSqoECqoO5OIESE4O6uQEYKYKTEwGSKwOSEAESK4OSKAODq4KDuoKrA4OpAQOBCQM4CIAcEQAoqQMouQIBEQEoKUAUFoAgoKCWlpafX19REREREdEdHREqquqAK+qcHREuriqqqqq8LiquvgAqg8AdHQAAEdERAwARA8AAE9ERExEAA8ARE9ExMREqqqqquIA4KKquvAA8LCqqqKq8PAAurCq9PAAqg8A8PBEAK+qqg4AxMQAwMREAK6qqquq9PBERAcAAExE////APD/MzMzzMzM/w8AAG4OpKYmriICrqoKLiQOAKwEAKougEYETkoOpK4EQKoKLKQEAK4O5OoELC4MpKoKDg4O5AQOhgYOLAwOgEREREQCBA4EoKUFpAQAQE4AAAQATGQErgoARmIAAGYAAAAA/AMPDw=="}
/*  1*/ , {{ 5,12}, "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"}
/*  2*/ , {{ 6, 8}, "AAAAAAAAnGiLqsgBnK/6os8BAOX7PocAAML5PocACMchvo8AAML5PsIBAAAwDAAA///P8///AOBJkgcAAAAAAAAAAA6zksQAnChyCIcAAAAAAAAAMEuztG0AgMrZnAoABMPxHEMAEMZ5HAYBCOcjPocAFEVRFEABvKqyKIoCnMhQmMgBAAAAgOcBCOcjPodwCOcjCIIACIIgPocAAIL5GAIAAML4DAIAAAAIguADAEX5FAUACMJxvg8Avs9xCAIAAAAAAAAACMchCIAAti0BAAAAAOVTlE8BBCcwkIMApgkhhCwDhKIQqsQCDEMAAAAACEEQBIEABIIgCEIAAMX5HAUAAIL4CAIAAAAAAMMQAAD4AAAAAAAAAMMAAAghhAAAnCirpsgBCIMgCMIBnAhihOADnAhyoMgBEEZJPgQBviB4oMgBGCF4osgBPgghBEEAnChyosgBnCjyIMQAAMAwAMMAAMAwAMMQEEIIBAIBAOADgA8ABAKBEEIAnAhiCIAAnKirusABnCiKvigCnih6ougBnCgIgsgBniiKougBviB4guADviB4giAAnCjoosgDoij6oigCHIIgCMIBIAiCosgBoqQYiiQCgiAIguADoq2KoigCoqnKoigCnCiKosgBnih6giAAnCiKqsQCnih6kigCnChwoMgBPoIgCIIAoiiKosgBoiiKIoUAoqiqqkoBokghlCgCoihSCIIAHoQQguABHEEQBMEBgEAgEAgAHARBEMQBCCUCAAAAAAAAAAD8DIMAAAAAAMCBvMgDguCJougBAMCJgsgBIMiLosgDAMCJnsABGEF4BEEAAMCLIg9yguBIkiQBCIAgCIIBEIBBECQxgiAphiIBCIIgCIIBAGCpqigCAOBIkiQBAMCJosgBAOCJougJAMCLosiDAKCRBOEAAMAJHMgBAOERBIUAACBJkkYBACCKIoUAACCKqk8BACBJjCQBACBJEocYAOBBjOABGEEYBIEBCIIACIIADATBEMQAlAIAAAAACGeLog8AnCgIIocwEiBJkkYBMMCJnsABHMCBvMgDFMCBvMgDDMCBvMgDHMWBvMgDACcKIocwHMCJnsABFMCJnsABDMCJnsABFIAgCIIBCAUgCIIBBIAgCIIBFIBQoi8CHMXZoi8CMOALnuADAOChvsIDvKL4iqIDHMBIksQAFMBIksQABsBIksQAHCBJkkYBBiBJkkYBFCBJEocYEiNJksQAFCBJksQAAMIJAocAGEl4BKkDIoX4iI8AhqJYuiQBEIpwCKIQGMCBvMgDGIAgCIIBGMBIksQAGCBJkkYBlAI4kiQBlAJIliYBHMiLPMADjCRJDOABCIAwgsgBAOALggAAAPCDIAAAgqRwIoQDgqTQKg4CCIAgHIcAAEBKJAAAACCREgAAKlABKlABaqVWaqVW1a/+1a/+CIIgCIIgCII8CIIgyIM8CIIgiqIsiqIoAAA8iqIowIM8CIIgyoIsiqIoiqIoiqIowIMsiqIoyoI8AAAAiqI8AAAAyIM8AAAAAAA8CIIgCILgAAAACIL8AAAAAAD8CIIgCILgCIIgAAD8AAAACIL8CIIgCI7gCIIgiqLoiqIoii74AAAAgC/oiqIoyg78AAAAwA/siqIoii7oiqIowA/8AAAAyg7siqIoyA/8AAAAiqL8AAAAwA/8CIIgAAD8iqIoiqL4AAAACI7gAAAAAI7gCIIgAAD4iqIoiqLsiqIoyA/8CIIgCII8AAAAAADgCIIg////////AAAA////x3Ecx3EcOI7jOI7j////AAAAAMBKEgsAgCM5kuQIniQIgiAAgE9RFEUBnkQghOQBAMBLEgMAACBJkiMIAEApCIIAHMKJHMIBjCR5ksQAACeKFGUDjEAgnMQAAECpKgUAAMKpKocAACd4AgcAACNJkgQAgAd4gAcAAMIhAAcAAgMxAuABECMwEOABAIQiCIIgCIIgiEIAAAL4AAIAAKUAlAIAjCQxAAAAAAAwDAAAAAAQAAAAAI4gikIACkVRAAAABkI4AAAAAOB5ngcAAAAAAAAAKQUAAA=="}
/*  3*/ , {{ 7,12}, "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"}
/*  4*/ , {{ 8, 8}, "AAAAAAAAAAB+gaWBvZmBfn7/2//D5/9+Nn9/fz4cCAAIHD5/PhwIABw+HH9/awgcCAgcPn8+CBwAABg8PBgAAP//58PD5///ADxmQkJmPAAAAAAAAAAAAPDg8L4zMzMePGZmZjwYfhgAAAAAAAAAAP7G/sbG5mcDmVo85+c8WpkBBx9/HwcBAEBwfH98cEAAGDx+GBh+PBhmZmZmZgBmAP7b297Y2NgAfsMeMzMeMR8AAAAAfn5+ABg8fhh+PBj/GDx+GBgYGAAYGBgYfjwYAAAYMH8wGAAAAAwGfwYMAAAAAAMDA38AAAAkZv9mJAAAABg8fv//AAAA//9+PBgAAAAAAAAAAAAADB4eDAwADAA2NjYAAAAAADY2fzZ/NjYADD4DHjAfDAAAYzMYDGZjABw2HG47M24ABgYDAAAAAAAYDAYGBgwYAAYMGBgYDAYAAGY8/zxmAAAADAw/DAwAAAAAAAAADgwGAAAAPwAAAAAAAAAAAAwMAGAwGAwGAwEAHjM7PzczHgAMDwwMDAw/AB4zMBwGMz8AHjMwHDAzHgA4PDYzfzAwAD8DHzAwMx4AHAYDHzMzHgA/MzAYDAYGAB4zMx4zMx4AHjMzPjAYDgAAAAwMAAwMAAAADAwADgwGGAwGAwYMGAAAAD8APwAAAAYMGDAYDAYAHjMwGAwADAA+Y3t7ewMeAAweMzM/MzMAP2ZmPmZmPwA8ZgMDA2Y8AD82ZmZmNj8Af0YWHhZGfwB/RhYeFgYPADxmAwNzZnwAMzMzPzMzMwAeDAwMDAweAHgwMDAzMx4AZ2Y2HjZmZwAPBgYGRmZ/AGN3f2tjY2MAY2dve3NjYwAcNmNjYzYcAD9mZj4GBg8AHjMzMzseOAA/ZmY+HjZnAB4zBxw4Mx4APy0MDAwMHgAzMzMzMzM/ADMzMzMzHgwAY2Nja393YwBjYzYcNmNjADMzMx4MDB4AfzMZDEZjfwAeBgYGBgYeAAMGDBgwYEAAHhgYGBgYHgAIHDZjAAAAAAAAAAAAAAD/DAwYAAAAAAAAAB4wPjNuAAcGPmZmZj0AAAAeMwMzHgA4MDA+MzNuAAAAHjM/Ax4AHDYGDwYGDwAAAG4zMz4wHwcGNm5mZmcADAAODAwMHgAYAB4YGBgbDgcGZjYeNmcADgwMDAwMHgAAADd/a2NjAAAAHzMzMzMAAAAeMzMzHgAAADtmZj4GDwAAbjMzPjB4AAAbNjYGDwAAAD4DHjAfAAgMPgwMLBgAAAAzMzMzbgAAADMzMx4MAAAAY2NrfzYAAABjNhw2YwAAADMzMz4wHwAAPxkMJj8AOAwMBwwMOAAYGBgAGBgYAAcMDDgMDAcAbjsAAAAAAAAIHDZjY2N/AB4zAzMeGDAeADMAMzMzfgA4AB4zPwMeAH7DPGB8ZvwAMwAeMD4zfgAHAB4wPjN+AAwMHjA+M34AAAA+AwM+YDx+wzxmfgY8ADMAHjM/Ax4ABwAeMz8DHgAzAA4MDAweAD5jHBgYGDwABwAODAwMHgAzDB4zMz8zAAwMAB4zPzMAOAA/Bh4GPwAAAP4w/jP+AHw2M38zM3MAHjMAHjMzHgAAMwAeMzMeAAAHAB4zMx4AHjMAMzMzfgAABwAzMzN+AAAzADMzPzAfYxw+Y2M+HAAzADMzMzMeABgYfgMDfhgYHDYmDwZnPwAzMx4/DD8MAA8bGy8zezNwcNgYfhgYGw44AB4wPjN+ABwADgwMDB4AADgAHjMzHgAAOAAzMzN+AAAfAB8zMzMAPwAzNz87MwA8NjZ8AH4AADxmZjwAfgAADAAMBgMzHgAAAAA/AwMAAAAAAD8wMAAAYzMbfMZzGfhjMxvP5vP5wAAYABgYPDwYAMxmM2bMAAAAM2bMZjMAAEQRRBFEEUQRqlWqVapVqlW77rvuu+677hgYGBgYGBgYGBgYGB8YGBgYGB8YHxgYGGxsbGxvbGxsAAAAAH9sbGwAAB8YHxgYGGxsb2BvbGxsbGxsbGxsbGwAAH9gb2xsbGxsb2B/AAAAbGxsbH8AAAAYGB8YHwAAAAAAAAAfGBgYGBgYGPgAAAAYGBgY/wAAAAAAAAD/GBgYGBgYGPgYGBgAAAAA/wAAABgYGBj/GBgYGBj4GPgYGBhsbGxs7GxsbGxs7Az8AAAAAAD8DOxsbGxsbO8A/wAAAAAA/wDvbGxsbGzsDOxsbGwAAP8A/wAAAGxs7wDvbGxsGBj/AP8AAABsbGxs/wAAAAAA/wD/GBgYAAAAAP9sbGxsbGxs/AAAABgY+Bj4AAAAAAD4GPgYGBgAAAAA/GxsbGxsbGzvbGxsGBj/AP8YGBgYGBgYHwAAAAAAAAD4GBgY//////////8AAAAA/////w8PDw8PDw8P8PDw8PDw8PD/////AAAAAAAAbjsTO24AAB4zHzMfAwMAf2MDAwMDAAB/NjY2NjYAf2YMGAxmfwAAAH4zMzMeAABmZmZmPgYDAG47GBgYGAA/DB4zMx4MPxw2Y39jNhwAHDZjYzY2dwA4DBg+MzMeAAAAftvbfgAAYDB+29t+BgM8BgM/AwY8AB4zMzMzMzMAAD8APwA/AAAMDD8MDAA/AAYMGAwGAD8AGAwGDBgAPwBw2NgYGBgYGBgYGBgYGxsODAwAPwAMDAAATjkATjkAABw2NhwAAAAAAAAAGBgAAAAAAAAAGAAAAPAwMDA3Njw4HjY2NjYAAAAeMBwGPgAAAAAAPDw8PAAAAAAAAAAAAAAwAAAA"}
/*  5*/ , {{ 8, 8}, "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"}
/*  6*/ , {{ 8,12}, "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"}
/*  7*/ , {{ 8,16}, "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AAA0bmZmdsbGxsZ2AAAAAAAA/sYGBgYGBgYGBgAAAAAAAAAAAP5tbGxsbGwAAAAAAAD+xgwYMDAYDMb+AAAAAAAAAAAA/GZmZmZmPAAAAAAAAAAAAGZmZmZmZt4GBgYAAAAAAAD+MTAwMDAwAAAAAAAAGBh+29vb234YGAAAAAAAADxmw8O9w8PDZjwAAAAAAAA8ZsPDw8PDZmbnAAAAAAAAfM4cOHzGxsbGfAAAAAAAAAAAAAB+29t+AAAAAAAAAAAYGBgYftvb234YGBgAAAAAAAAAeAwGPAYMeAAAAAAAAHzGxsbGxsbGxsYAAAAAAAAA/gAAAP4AAAD+AAAAAAAAABgYGH4YGBgA/wAAAAAAAAAOHDhwOBwOAH4AAAAAAAAAcDgcDhw4cAB+AAAAAAAAcNjYGBgYGBgYGBgYGBgYGBgYGBgYGBsbGw4AAAAAAAAAABgYAH4AGBgAAAAAAAAAAAAA3HYA3HYAAAAAAAAAPGZmPAAAAAAAAAAAAAAAAAAAAAAAGBgAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAA8PAwMDAwMzM2Njw4AAAAADZuZmZmZgAAAAAAAAAAAAA8ZDAYDHwAAAAAAAAAAAAAAAAAfHx8fHx8fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAA="}
/*  8*/ , {{ 9,16}, "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"}
/*  9*/ , {{10,18}, "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"}
/* 10*/ , {{12,16}, ""}
/* 11*/ , {{16, 8}, "AAAAAAAAAAAAAAAAAAAAAPw/A8AzzAPA88/DwwPA/D/8P///z/P//w/wP/z///w/PA//P/8//z/8D/ADwAAAAMAA8AP8D/8//A/wA8AAAADwA/wP8AP/P/8/zzzAAPgHwADAAPAD/A//P/wPwAD4BwAAAADAA/AP8A/AAwAAAAD/////P/wP8A/wP/z/////AADwDzw8DDAMMDw88A8AAAAAAAAAAAAAAAAAAAAAAAAA/wD8AP/8zw8PDw8PD/wD8A88PDw8PDzwD8AD/D/AAwAAAAAAAAAAAAAAAAAAAAD8/zzw/P888DzwPPw/PA8Aw8PMM/APP/w//PAPzDPDwwMAPwD/A/8//wM/AAMAAAAAMAA/8D//P/A/AD8AMAAAwAPwD/w/wAPAA/w/8A/AAzw8PDw8PDw8PDwAADw8AAD8/8/nz+f85wDnAOcA5wAA+D8e4PgHHh4eHvgHAw/+AwAAAAAAAAAA/D/8P/w/AADAA/AP/D/AA/w/8A/AA///wAPwD/w/wAPAA8ADwAMAAMADwAPAA8AD/D/wD8ADAAAAAMADAA//PwAPwAMAAAAAAADwADwA/z88APAAAAAAAAAAAAAPAA8ADwD/PwAAAAAAADAMPDz//zw8MAwAAAAAAADAA/AP/D//////AAAAAAAA//////w/8A/AAwAAAAAAAAAAAAAAAAAAAAAAAAAA8AD8A/wD8ADwAAAA8AAAADwPPA88DwAAAAAAAAAAAAA8DzwP/z88D/8/PA88DwAA8AD8Dw8A/AMAD/8D8AAAAAAADzwPD8AD8AA8PA88AADwAzwP8AP8PM8PDw/8PAAAPAA8AA8AAAAAAAAAAAAAAMAD8AA8ADwAPADwAMADAAA8APAAwAPAA8AD8AA8AAAAAAA8PPAP///wDzw8AAAAAAAA8ADwAP8P8ADwAAAAAAAAAAAAAAAAAAAA/ADwADwAAAAAAAAA/w8AAAAAAAAAAAAAAAAAAAAAAADwAPAAAAAAPAAPwAPwADwADwADAAAA/AMPD88Pbw8/Dx8P/AMAAPAA/wDwAPAA8ADwAP8PAAD8Aw8PAA/wAzwADw//DwAA/AMPDwAP8AMADw8P/AMAAMAP8A88Dw8P/z8ADwAPAAD/Dw8A/wMADwAPDw/8AwAA8AM8AA8A/wMPDw8P/AMAAP8PDw8AD8AD8AA8ADwAAAD8Aw8PDw/8Aw8PDw/8AwAA/AMPDw8P/A8AD8AD/AAAAAAAAADwAPAAAADwAPAAAAAAAAAA8ADwAAAA/ADwADwAwAPwADwADwA8APAAwAMAAAAAAAD/DwAA/w8AAAAAAAA8APAAwAMAD8AD8AA8AAAA/AMPDwAPwAPwAAAA8AAAAPwPDzzPP88/zz8PAPwDAADwAPwDDw8PD/8PDw8PDwAA/w88PDw8/A88PDw8/w8AAPAPPDwPAA8ADwA8PPAPAAD/DzwPPDw8PDw8PA//DwAA/z88MDwD/AM8Azww/z8AAP8/PDA8A/wDPAM8AP8AAADwDzw8DwAPAA8/PDzwPwAADw8PDw8P/w8PDw8PDw8AAPwD8ADwAPAA8ADwAPwDAADAPwAPAA8ADw8PDw/8AwAAPzw8PDwP/AM8Dzw8PzwAAP8APAA8ADwAPDA8PP8/AAAPPB8+/z/vPc88DzwPPAAADzw/PP88zz8PPw88DzwAAPADPA8PPA88Dzw8D/ADAAD/Dzw8PDz8DzwAPAD/AAAA/AMPDw8PDw/PD/wDwA8AAP8PPDw8PPwPvAc8Hj88AAD8Aw8PPwDwA8APDw/8AwAA/w/zDPAA8ADwAPAA/AMAAA8PDw8PDw8PDw8PD/8PAAAPDw8PDw8PDw8P/APwAAAADzwPPA88zzz/Pz8/DzwAAA88Dzw8D/ADPA8PPA88AAAPDw8PDw/8A/AA8AD8AwAA/z8PD8MD8AA8MA88/z8AAPwDPAA8ADwAPAA8APwDAAAPADwA8ADAAwAPADwAMAAA/APAA8ADwAPAA8AD/AMAAMAA8AM8Dw88AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//8ADwAMADAAAAAAAAAAAAAAAAAAD8AwAP/A8PD/w5AAA/ADwA/A88PDw8PDznDwAAAAAAAPwDDw8PAA8P/AMAAMAPAA8AD/wPDw8PD/w8AAAAAAAA/AMPD/8PDwD8AwAA8AM8DzwA/wA8ADwA/wAAAAAAAAD8OQ8PDw/8DwAP/wM/ADwAPA/8PDw8PDw/PAAA8AAAAPwA8ADwAPAA/AMAAMADAAD8A8ADwAPAA88D/AA/ADwAPDw8D/wDPA8/PAAA/ADwAPAA8ADwAPAA/AMAAAAAAAAPD/8/zzzPPA88AAAAAAAA/wMPDw8PDw8PDwAAAAAAAPwDDw8PDw8P/AMAAAAAAADPDzw8PDz8DzwA/wAAAAAA/DwPDw8P/A8AD8A/AAAAAM8DPA88DzwA/wAAAAAAAAD8Dw8A/AMAD/8DAADAAPAA/A/wAPAA8A7AAwAAAAAAAA8PDw8PDw8P/DwAAAAAAAAPDw8PDw/8A/AAAAAAAAAADzzPPO89/z88DwAAAAAAAA88PA/wAzwPDzwAAAAAAAAPDw8PDw/8DwAP/wMAAAAA/w/DA/AAPAz/DwAAwA/wAPAAPwDwAPAAwA8AAMADwAPAAwAAwAPAA8ADAAA/APAA8ADAD/AA8AA/AAAA/DzPDwAAAAAAAAAAAAAAAMAA8AM8Dw88DzwPPP8/AAD8Aw8PDwAPD/wDwAMAD/wDAAAPDwAADw8PDw8P/D8AAMAPAAD8Aw8P/w8PAPwDAAD8Pw/w8A8APPA/PDzw/wAADw8AAPwDAA/8Dw8P/D8AAD8AAAD8AwAP/A8PD/w/AADwAPAA/AMAD/wPDw/8PwAAAAAAAPwPDwAPAPwPADzwD/w/D/DwDzw8/D88APAPAAAPDwAA/AMPD/8PDwD8AwAAPwAAAPwDDw//Dw8A/AMAAA8PAAD8APAA8ADwAPwDAAD8Dw888APAA8ADwAPwDwAAPwAAAPwA8ADwAPAA/AMAAA8P8AD8Aw8PDw//Dw8PAADwAPAAAAD8Aw8P/w8PDwAAwA8AAP8PPAD8AzwA/w8AAAAAAAD8/wAP/P8PD/z/AADwPzwPDw//Pw8PDw8PPwAA/AMPDwAA/AMPDw8P/AMAAAAADw8AAPwDDw8PD/wDAAAAAD8AAAD8Aw8PDw/8AwAA/AMPDwAADw8PDw8P/D8AAAAAPwAAAA8PDw8PD/w/AAAAAA8PAAAPDw8P/w8AD/8DD/DAA/APPDw8PPAPwAMAAA8PAAAPDw8PDw8PD/wDAADAA8AD/D8PAA8A/D/AA8AD8AM8DzwM/wA8AD88/w8AAA8PDw/8A/8P8AD/D/AA8AD/AMADwAP/DAAP8P8ADwD/AD/A88AD/D/AA8ADzwP8AMAPAAD8AwAP/A8PD/w/AADwAwAA/ADwAPAA8AD8AwAAAADADwAA/AMPDw8P/AMAAAAAwA8AAA8PDw8PD/w/AAAAAP8DAAD/Aw8PDw8PDwAA/w8AAA8PPw//D88PDw8AAPAPPA88D/A/AAD8PwAAAADwDzw8PDzwDwAA/D8AAAAA8AAAAPAAPAAPAA8P/AMAAAAAAAAAAP8PDwAPAAAAAAAAAAAAAAD/DwAPAA8AAAAADzwPD88D8D948B4/hwOA/w94Dx6PB+/xePwe/8f/APAAAMADAADAA8AD8A/wD8ADAADw8Dw8Dw88PPDwAAAAAAAADw88PPDwPDwPDwAAAAAwMAMDMDADAzAwAwMwMAMDzMwzM8zMMzPMzDMzzMwzM8/P/PzPz/z8z8/8/M/P/PzAA8ADwAPAA8ADwAPAA8ADwAPAA8ADwAP/A8ADwAPAA8ADwAP/A8AD/wPAA8ADwAPwPPA88DzwPP888DzwPPA8AAAAAAAAAAD/P/A88DzwPAAAAAD/A8AD/wPAA8ADwAPwPPA8/zwAPP888DzwPPA88DzwPPA88DzwPPA88DzwPAAAAAD/PwA8/zzwPPA88DzwPPA8/zwAPP8/AAAAAAAA8DzwPPA88Dz/PwAAAAAAAMADwAP/A8AD/wMAAAAAAAAAAAAAAAAAAP8DwAPAA8ADwAPAA8ADwAPA/wAAAAAAAMADwAPAA8AD//8AAAAAAAAAAAAAAAAAAP//wAPAA8ADwAPAA8ADwAPA/8ADwAPAAwAAAAAAAAAA//8AAAAAAADAA8ADwAPAA///wAPAA8ADwAPAA8D/wAPA/8ADwAPAA/A88DzwPPA88PzwPPA88DzwPPA88PzwAPD/AAAAAAAAAAAAAPD/8ADw/PA88DzwPPA88Dz//AAA//8AAAAAAAAAAAAA//8AAP/88DzwPPA88DzwPPD88ADw/PA88DzwPAAAAAD//wAA//8AAAAAAADwPPA8//wAAP/88DzwPPA8wAPAA///AAD//wAAAAAAAPA88DzwPPA8//8AAAAAAAAAAAAA//8AAP//wAPAA8ADAAAAAAAAAAD///A88DzwPPA88DzwPPA88P8AAAAAAADAA8ADwP/AA8D/AAAAAAAAAAAAAMD/wAPA/8ADwAPAAwAAAAAAAAAA8P/wPPA88DzwPPA88DzwPP/88DzwPPA8wAPAA///AAD//8ADwAPAA8ADwAPAA8AD/wMAAAAAAAAAAAAAAAAAAMD/wAPAA8AD/////////////////////wAAAAAAAAAA////////////AP8A/wD/AP8A/wD/AP8AAP8A/wD/AP8A/wD/AP8A////////////AAAAAAAAAAAAAAAA/DzPDw8Dzw/8PAAAAAD8Aw8P/wMPD/8DDwAPAAAA/z8PPA8ADwAPAA8AAAAAAP8/PA88DzwPPA88DwAA/z88PPAAwAPwADw8/z8AAAAAAAD8Pw8PDw8PD/wDAAAAADw8PDw8PDw8/A88AA8AAAD8PM8PwAPAA8ADwAMAAP8P8AD8Aw8PDw/8A/AA/w/wAzwPDzz/Pw88PA/wAwAA8AM8Dw88Dzw8DzwPPz8AAMAP8ADAA/wPDw8PD/wDAAAAAAAA/D/P88/z/D8AAAAAADwAD/w/z/PP8/w/PAAPAPAPPAAPAP8PDwA8APAPAAD8Aw8PDw8PDw8PDw8PDwAAAAD/DwAA/w8AAP8PAAAAAPAA8AD/D/AA8AAAAP8PAAA8APAAwAPwADwAAAD/DwAAwAPwADwA8ADAAwAA/w8AAAA/wPPA88ADwAPAA8ADwAPAA8ADwAPAA8ADzwPPA/wA8ADwAAAA/w8AAPAA8AAAAAAA/DDDDwAA/DDDDwAAAADwAzwPPA/wAwAAAAAAAAAAAAAAAAAAwAPAAwAAAAAAAAAAAAAAAAAAwAMAAAAAAAAA/wAPAA8ADz8PPA/wD8AP/AM8DzwPPA88DwAAAAAAAPwDAA/wAzwA/A8AAAAAAAAAAAAA8A/wD/AP8A8AAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAA="}
/* 12*/ , {{16,12}, ""}
	};

static		::gpk::error_t										setupDefaultFontTexture									(::gpk::SGUI & gui)																						{
	for(uint32_t iFont = 0; iFont < ::gpk::size(fontsDefault); ++iFont) {
		::gpk::SGUIFont														& loadedFont		= gui.Fonts[gui.Fonts.push_back(::gpk::SGUIFont{fontsDefault[iFont].CharSize,})];
		gpk_necs(::gpk::rasterFontLoadB64(loadedFont.Texture, loadedFont.CharSize, fontsDefault[iFont].Base64String));
	}
	gpk_necs(::gpk::guiUpdateMetrics(gui, gui.LastSize, true));
	return 0;
}

static		::gpk::error_t										controlInstanceReset									(::gpk::SGUI & gui, int32_t iControl)										{
	::gpk::SGUIControlTable												& controlTable											= gui.Controls;
	controlTable.Metrics	[iControl]								= {};
	controlTable.Children	[iControl]								= ::gpk::view_array<int32_t>{};
	controlTable.Modes		[iControl]								= {};
	controlTable.States		[iControl]								= {};
	controlTable.Images		[iControl]								= {};
	//controlTable.Modes		[iControl].UseNewPalettes				= 1;
	::gpk::SControl														& control				= controlTable.Controls		[iControl]	= {};
	::gpk::SControlConstraints											& controlConstraints	= controlTable.Constraints	[iControl]	= {};
	::gpk::SControlText													& controlText			= controlTable.Text			[iControl]	= {};
	control.IndexParent														= -1;
	control.Align															= ::gpk::ALIGN_TOP_LEFT;
	control.Area															= {{0, 0}, {16, 16}};
	::gpk::memcpy_s(control.Palettes.Storage, gui.DefaultColors.Storage);
	controlConstraints.AttachSizeToControl									= {-1, -1};
	controlConstraints.AttachSizeToText										= {};
	controlConstraints.DockToControl										= {-1, -1, -1, -1};
	controlText.Align														= ::gpk::ALIGN_CENTER;
	return 0;
}

			::gpk::error_t										gpk::controlCreateChild									(::gpk::SGUI& gui, int32_t iParent)						{
	int32_t																idControl												= ::gpk::controlCreate(gui);
	::gpk::controlSetParent(gui, idControl, iParent);
	return idControl;
}

			::gpk::error_t										gpk::controlCreate										(::gpk::SGUI& gui)										{
	static constexpr	const uint32_t									iShades													= 16;
	if(0 == gui.Palette.size()) {
		static				const SColorBGRA								paletteColors []										=
			// 16 Base colors
			{ ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_0	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_1	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_2	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_3	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_4	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_5	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_6	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_7	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_8	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_9	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_10	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_11	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_12	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_13	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_14	}
			, ::gpk::SColorRGBA{::gpk::ASCII_COLOR_INDEX_15	}
			// 16 Extended colors
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_14	+ ::gpk::ASCII_COLOR_INDEX_1}
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_13	+ ::gpk::ASCII_COLOR_INDEX_2}
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_12	+ ::gpk::ASCII_COLOR_INDEX_3}
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_11	+ ::gpk::ASCII_COLOR_INDEX_4}
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_10	+ ::gpk::ASCII_COLOR_INDEX_5}
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_9 	+ ::gpk::ASCII_COLOR_INDEX_6}
			, ::gpk::SColorBGRA{::gpk::ASCII_COLOR_INDEX_8 	+ ::gpk::ASCII_COLOR_INDEX_7}
			, ::gpk::SColorBGRA{0xFFFFFFFFU & (::gpk::ASCII_COLOR_INDEX_4 * (uint64_t)::gpk::ASCII_COLOR_INDEX_11)}
			, ::gpk::SColorBGRA{0xFFFFFFFFU & (::gpk::ASCII_COLOR_INDEX_5 * (uint64_t)::gpk::ASCII_COLOR_INDEX_10)}
			, ::gpk::SColorBGRA{0xFFFFFFFFU & (::gpk::ASCII_COLOR_INDEX_7 * (uint64_t)::gpk::ASCII_COLOR_INDEX_8 )}
			, ::gpk::SColorBGRA{(uint32_t)(::gpk::ASCII_COLOR_INDEX_1 + ::gpk::ASCII_COLOR_INDEX_4)}
			, ::gpk::SColorBGRA{(uint32_t)(::gpk::ASCII_COLOR_INDEX_3 + ::gpk::ASCII_COLOR_INDEX_7)}
			, ::gpk::SColorBGRA{(uint32_t)(::gpk::ASCII_COLOR_INDEX_1 + ::gpk::ASCII_COLOR_INDEX_8)}
			, ::gpk::SColorBGRA{(uint32_t)(::gpk::ASCII_COLOR_INDEX_4 + ::gpk::ASCII_COLOR_INDEX_7)}

			, ::gpk::SColorBGRA{::gpk::BROWN}
			, ::gpk::SColorBGRA{::gpk::LIGHTORANGE}
		};
		gpk_necall(::paletteSetupDefault(gui.Palette, paletteColors, iShades), "%s", "Unknown issue!");
	}
	if(0 == gui.ControlThemes.size())
		gpk_necall(::themeSetupDefault(gui.Palette, gui.ControlThemes, iShades), "%s", "Unknown issue! Maybe the palette system got broken?");

	if(0 == gui.Fonts.size())
		gpk_necall(::setupDefaultFontTexture(gui), "%s", "Failed to set up default texture!");

	if(gui.Fonts.size() <= gui.SelectedFont)
		gui.SelectedFont = gui.Fonts.size() - 1;


	for(uint32_t iControl = 0; iControl < gui.Controls.States.size(); ++iControl) {
		if(gui.Controls.States[iControl].Unused) {
			gpk_necall(::controlInstanceReset(gui, iControl), "%s", "Unknown issue!");
			return iControl;
		}
	}
	::gpk::error_t														iControl												= -1;
	gpk_necall(iControl = ::gpk::resize( gui.Controls.Controls.size() + 1
		, gui.Controls.Controls
		, gui.Controls.States
		, gui.Controls.Metrics
		, gui.Controls.Text
		, gui.Controls.Children
		, gui.Controls.Constraints
		, gui.Controls.Modes
		, gui.Controls.Images
		) - 1, "%s", "Failed to resize! Out of memory?");
	gpk_necall(::controlInstanceReset(gui, iControl), "%s", "Unknown issue!");
	return iControl;
}
			::gpk::error_t										gpk::controlDelete										(::gpk::SGUI & gui, int32_t iControl, bool recursive)			{
	gpk_necall(::gpk::controlInvalid(gui, iControl), "Invalid control id: %u.", iControl);
	info_printf("Deleting control id: %i.", iControl);
	if(recursive) { // Delete children first.
		::gpk::array_pod<int32_t>											children												= gui.Controls.Children[iControl];
		for(uint32_t iChild = 0, countChild = children.size(); iChild < countChild; ++iChild)
			gerror_if(errored(::gpk::controlDelete(gui, children[iChild], true)), "Failed to delete control! Invalid control id? %i.", children[iChild]);
	}
	// Remove from parent list
	const uint32_t														indexParent												= (uint32_t)gui.Controls.Controls[iControl].IndexParent;
#if defined(GPK_DEBUG_ENABLED)
	int32_t																childrenRemoved											= 0;
#endif
	if(indexParent < gui.Controls.Controls.size() && false == gui.Controls.States[indexParent].Unused) {
		::gpk::array_pod<int32_t>											& children												= gui.Controls.Children[indexParent];
		for(int32_t iChild = 0; iChild < (int32_t)children.size(); ++iChild)
			if(children[iChild] == iControl) {
				gpk_necall(children.remove(iChild), "Failed to remove child at index: %u.", iChild);
#if defined(GPK_DEBUG_ENABLED)
				--iChild;
				++childrenRemoved;
#else
				break;
#endif
			}
	}
#if defined(GPK_DEBUG_ENABLED)
	gerror_if(childrenRemoved > 1, "%s", "Parent should not reference a child control more than once.");
#endif
	::gpk::SControlState												& controlState											= gui.Controls.States[iControl];
	controlState.Unused												= true;
	return 0;
}

			::gpk::error_t										gpk::controlSetParent									(::gpk::SGUI& gui, int32_t iControl, int32_t iParent)	{
	gpk_necall(::gpk::controlInvalid(gui, iControl), "Invalid control id: %u.", iControl);
	const uint32_t														oldParent												= gui.Controls.Controls[iControl].IndexParent;
	::gpk::SControl														& control												= gui.Controls.Controls[iControl];
	if(control.IndexParent == iParent)	// Exit early if there is nothing to do here.
		return 0;

	control.IndexParent												= iParent;
	if(::gpk::controlInvalid(gui, iParent)) {
		ree_if(-1 != iParent, "Invalid parent control id: %u.", iParent);
		return 0;
	}

	if(oldParent < gui.Controls.Controls.size() && false == gui.Controls.States[oldParent].Unused) {
		::gpk::array_pod<int32_t>											& children												= gui.Controls.Children[oldParent];
		for(int32_t iChild = 0; iChild < (int32_t)children.size(); ++iChild)
			if(children[iChild] == iControl) {
				gui.Controls.States[oldParent].Updated	= false;
				gpk_necall(children.remove(iChild), "Failed to remove child at index: %u.", iChild);
				break;
			}
	}

	// Set iControl to parent's children array.
	::gpk::array_pod<int32_t>											& children												= gui.Controls.Children[iParent];
	for(int32_t iChild = 0, countChild = children.size(); iChild < countChild; ++iChild)
		if(children[iChild] == iControl)
			return 0;

	gui.Controls.States[iParent].Updated							= false;
	gui.Controls.States[iControl].Updated							= false;
	gpk_necall(children.push_back(iControl), "%s", "Out of memory?");
	return 0;
}

static		::gpk::error_t										buildControlGeometry									(const ::gpk::SControl & control, const ::gpk::SControlMetrics & controlMetrics, const ::gpk::SGUIZoom& zoom, ::gpk::view_array<::gpk::SRectangle2<int16_t>> finalRects, ::gpk::view_array<::gpk::STriangle2<int16_t>> triangles)					{
	::gpk::SRectLimits<int16_t>											scaledBorders											= {};
	const ::gpk::SCoord2<double>										scaleFinal												= zoom.DPI * zoom.ZoomLevel;
	scaledBorders.Left												= (int16_t)(control.Border.Left		* scaleFinal.x);
	scaledBorders.Top												= (int16_t)(control.Border.Top		* scaleFinal.y);
	scaledBorders.Right												= (int16_t)(control.Border.Right	* scaleFinal.x);
	scaledBorders.Bottom											= (int16_t)(control.Border.Bottom	* scaleFinal.y);
	(void)scaledBorders;

	const ::gpk::SRectangle2<int16_t>									& rectTotal												= controlMetrics.Total.Global;
	finalRects[::gpk::GUI_CONTROL_AREA_BACKGROUND		]			= rectTotal;
	finalRects[::gpk::GUI_CONTROL_AREA_CLIENT			]			= controlMetrics.Client.Global;
	finalRects[::gpk::GUI_CONTROL_AREA_BORDER_LEFT		]			= {rectTotal.Offset , ::gpk::SCoord2<int16_t>{control.Border.Left, rectTotal.Size.y}};
	finalRects[::gpk::GUI_CONTROL_AREA_BORDER_TOP		]			= {rectTotal.Offset , ::gpk::SCoord2<int16_t>{rectTotal.Size.x, control.Border.Top}};
	finalRects[::gpk::GUI_CONTROL_AREA_BORDER_RIGHT		]			= {rectTotal.Offset + ::gpk::SCoord2<int16_t>{int16_t(rectTotal.Size.x - control.Border.Right), 0}, ::gpk::SCoord2<int16_t>{control.Border.Right, controlMetrics.Total.Global.Size.y}};
	finalRects[::gpk::GUI_CONTROL_AREA_BORDER_BOTTOM	]			= {rectTotal.Offset + ::gpk::SCoord2<int16_t>{0, int16_t(rectTotal.Size.y - control.Border.Bottom)}, ::gpk::SCoord2<int16_t>{rectTotal.Size.x, control.Border.Bottom}};
	finalRects[::gpk::GUI_CONTROL_AREA_BACKGROUND		].Offset.x	+= control.Border.Left	;
	finalRects[::gpk::GUI_CONTROL_AREA_BACKGROUND		].Offset.y	+= control.Border.Top	;
	finalRects[::gpk::GUI_CONTROL_AREA_BACKGROUND		].Size	.x	-= control.Border.Left	+ control.Border.Right	;
	finalRects[::gpk::GUI_CONTROL_AREA_BACKGROUND		].Size	.y	-= control.Border.Top	+ control.Border.Bottom	;

	// --- Draw control corners
	::gpk::SCoord2<int16_t>												startOffset												= controlMetrics.Total.Global.Offset;
	triangles[0]													= {startOffset, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Left, control.Border.Top}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Left, 0}	};
	triangles[1]													= {startOffset, startOffset + ::gpk::SCoord2<int16_t>{0, control.Border.Top}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Left, control.Border.Top}	};

	int16_t																startOffsetX											= startOffset.x + controlMetrics.Total.Global.Size.x - control.Border.Right;
	startOffset														= {startOffsetX, controlMetrics.Total.Global.Offset.y};
	triangles[2]													= {startOffset, startOffset + ::gpk::SCoord2<int16_t>{0, control.Border.Top}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, 0}	};
	triangles[3]													= {startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, 0}, startOffset + ::gpk::SCoord2<int16_t>{0, control.Border.Top}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, control.Border.Top}	};

	int16_t																startOffsetY											= startOffset.y + controlMetrics.Total.Global.Size.y - control.Border.Bottom;
	startOffset														= {controlMetrics.Total.Global.Offset.x, startOffsetY};
	triangles[4]													= {startOffset, startOffset + ::gpk::SCoord2<int16_t>{0, control.Border.Bottom}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Left, 0}	};
	triangles[5]													= {startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, 0}, startOffset + ::gpk::SCoord2<int16_t>{0, control.Border.Top}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, control.Border.Top}	};

	startOffset														= controlMetrics.Total.Global.Offset + controlMetrics.Total.Global.Size - ::gpk::SCoord2<int16_t>{control.Border.Right, control.Border.Bottom};
	triangles[6]													= {startOffset, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, control.Border.Bottom}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, 0}	};
	triangles[7]													= {startOffset, startOffset + ::gpk::SCoord2<int16_t>{0, control.Border.Bottom}, startOffset + ::gpk::SCoord2<int16_t>{control.Border.Right, control.Border.Bottom}	};
	return 0;
}

static						::gpk::error_t						controlUpdateMetrics									(::gpk::SGUI& gui, int32_t iControl, const ::gpk::SCoord2<uint32_t> & _targetSize)					{
	gpk_necall(::gpk::controlInvalid(gui, iControl), "Invalid control id: %u.", iControl);
	::gpk::SControlState												& controlState											= gui.Controls.States[iControl];
	const ::gpk::SControl												& control												= gui.Controls.Controls[iControl];
	::gpk::SCoord2<double>												scale													= gui.Zoom.DPI * gui.Zoom.ZoomLevel;
	if(fabs(1.0 - scale.x) < 0.001) scale.x = 1.0;
	if(fabs(1.0 - scale.y) < 0.001) scale.y = 1.0;
	::gpk::SCoord2<double>												scaledPosition											= {control.Area.Offset	.x * scale.x, control.Area.Offset	.y * scale.y};
	::gpk::SCoord2<double>												scaledSize												= {control.Area.Size	.x * scale.x, control.Area.Size		.y * scale.y};
	//::gpk::SRectLimits<double>											scaledBorders											= {(control.Border.Left * scale.x), (control.Border.Top * scale.y), (control.Border.Right * scale.x), (control.Border.Bottom * scale.y)};
	//::gpk::SRectLimits<double>											scaledMargins											= {(control.Margin.Left * scale.x), (control.Margin.Top * scale.y), (control.Margin.Right * scale.x), (control.Margin.Bottom * scale.y)};

	::gpk::SControlMetrics												& controlMetrics										= gui.Controls.Metrics[iControl];
	::gpk::SRectangle2<double>											rectText												= {};
	::gpk::SControlText													& controlText											= gui.Controls.Text[iControl];
	::gpk::SRasterFont													selectedFont											= gui.Fonts[::gpk::in_range(controlText.FontSelected, (int16_t)0, (int16_t)gui.Fonts.size()) ? controlText.FontSelected : gui.SelectedFont];
	const ::gpk::SCoord2<uint8_t>										fontCharSize											= selectedFont.CharSize;
	rectText.Size													= {(double)(fontCharSize.x * controlText.Text.size()), (double)fontCharSize.y};
	rectText.Size.InPlaceScale(scale.x, scale.y);

	const ::gpk::SControlConstraints									& controlConstraints									= gui.Controls.Constraints[iControl];
	const ::gpk::SRectLimits<int16_t>									ncSizes													= ::gpk::controlNCRect(control);
	const ::gpk::SRectLimits<double>									ncSizesScaled											= {(ncSizes.Left * scale.x), (ncSizes.Top * scale.y), (ncSizes.Right * scale.x), (ncSizes.Bottom * scale.y)};
	const ::gpk::SCoord2<double>										ncTotalSize												= {(double)ncSizes.Left + ncSizes.Right, (double)ncSizes.Top + ncSizes.Bottom};
	const ::gpk::SCoord2<double>										ncTotalSizeScaled										= ncTotalSize.GetScaled(scale.x, scale.y);
	if(controlConstraints.AttachSizeToText.x) scaledSize.x				= rectText.Size.x + ncTotalSizeScaled.x;
	if(controlConstraints.AttachSizeToText.y) scaledSize.y				= rectText.Size.y + ncTotalSizeScaled.y;
	const bool															isValidParent											= 0 == ::gpk::controlInvalid(gui, control.IndexParent);
	const ::gpk::SCoord2<int16_t>										targetSize												= isValidParent ? gui.Controls.Metrics[control.IndexParent].Client.Global.Size : _targetSize.Cast<int16_t>();

	if(controlConstraints.AttachSizeToControl.x == iControl) { if(controlConstraints.DockToControl.Left	!= -1) {} else { scaledPosition.x = 0; } scaledSize.x = targetSize.x; } else if(false == ::gpk::controlInvalid(gui, controlConstraints.AttachSizeToControl.x)) { if(controlConstraints.DockToControl.Left != -1) {} else { scaledPosition.x = 0;} scaledSize.x = gui.Controls.Metrics[controlConstraints.AttachSizeToControl.x].Total.Global.Size.x; }
	if(controlConstraints.AttachSizeToControl.y == iControl) { if(controlConstraints.DockToControl.Top	!= -1) {} else { scaledPosition.y = 0; } scaledSize.y = targetSize.y; } else if(false == ::gpk::controlInvalid(gui, controlConstraints.AttachSizeToControl.y)) { if(controlConstraints.DockToControl.Top  != -1) {} else { scaledPosition.y = 0;} scaledSize.y = gui.Controls.Metrics[controlConstraints.AttachSizeToControl.y].Total.Global.Size.y; }

	controlMetrics.Client	.Local									= {{(int16_t)ncSizesScaled.Left, (int16_t)ncSizesScaled.Top}, (scaledSize - ncTotalSizeScaled).Cast<int16_t>()};
	::gpk::SCoord2<double> minSizeScaled = (controlConstraints.SizeMinMax.Min.Cast<double>().InPlaceScale(scale.x, scale.y));
	::gpk::SCoord2<double> maxSizeScaled = (controlConstraints.SizeMinMax.Max.Cast<double>().InPlaceScale(scale.x, scale.y));
	scaledSize.x													= ::gpk::max(minSizeScaled.x, ::gpk::min(maxSizeScaled.x, scaledSize.x));
	scaledSize.y													= ::gpk::max(minSizeScaled.y, ::gpk::min(maxSizeScaled.y, scaledSize.y));
	::gpk::realignRectangle(targetSize.Cast<uint32_t>(), ::gpk::SRectangle2<int16_t>{scaledPosition.Cast<int16_t>(), scaledSize.Cast<int16_t>()}, controlMetrics.Total.Local, control.Align);
	controlMetrics.Total	.Global									= controlMetrics.Total	.Local;
	controlMetrics.Client	.Global									= controlMetrics.Client	.Local;
	controlMetrics.Client	.Global.Offset							+= controlMetrics.Total	.Local.Offset;
	if(isValidParent) {
		::gpk::SControlMetrics												& parentMetrics											= gui.Controls.Metrics[control.IndexParent];
		controlMetrics.Client	.Global.Offset							+= parentMetrics.Client.Global.Offset;
		controlMetrics.Total	.Global.Offset							+= parentMetrics.Client.Global.Offset;
	}

	const ::gpk::SRectLimits<int32_t>									& dockToControl											= controlConstraints.DockToControl;
	if(dockToControl.Right	!= -1) {
		gpk_necall(::gpk::controlInvalid(gui, dockToControl.Right), "Invalid control id: %i.", dockToControl.Right);
		::gpk::controlUpdateMetricsTopToDown(gui, dockToControl.Right, targetSize.Cast<uint32_t>(), true);
		const ::gpk::SControl												& other									= gui.Controls.Controls	[dockToControl.Right];
		const ::gpk::SControlMetrics										& otherMetrics							= gui.Controls.Metrics	[dockToControl.Right];
		if(gbit_true(other.Align, ::gpk::ALIGN_RIGHT) && gbit_false(other.Align, ::gpk::ALIGN_HCENTER)) {
			controlMetrics.Total	.Global.Offset.x						= otherMetrics.Total.Global.Offset.x - controlMetrics.Total.Global.Size.x;
			controlMetrics.Client	.Global.Offset.x						= (int16_t)(controlMetrics.Total.Global.Offset.x + ncSizesScaled.Left);
			int16_t																diffToSubstract							= targetSize.x - otherMetrics.Total.Local.Offset.x;
			if(controlConstraints.AttachSizeToControl.x == iControl) {
				controlMetrics.Total	.Global.Size.x							-= diffToSubstract;
				controlMetrics.Client	.Global.Size.x							-= diffToSubstract;
				controlMetrics.Total	.Global.Offset.x						+= diffToSubstract;
				controlMetrics.Client	.Global.Offset.x						+= diffToSubstract;
			}
		}
		else {
			controlMetrics.Total	.Global.Offset.x						= otherMetrics.Total.Global.Offset.x + otherMetrics.Total.Global.Size.x;
			controlMetrics.Client	.Global.Offset.x						= (int16_t)(controlMetrics.Total.Global.Offset.x + ncSizesScaled.Left);
		}
	}
	if(dockToControl.Bottom	!= -1) {
		gpk_necall(::gpk::controlInvalid(gui, dockToControl.Bottom	), "Invalid control id: %i.", dockToControl.Bottom	);
		const ::gpk::SControl												& other													= gui.Controls.Controls[dockToControl.Bottom];
		const ::gpk::SControlMetrics										& otherMetrics											= gui.Controls.Metrics[dockToControl.Bottom	];
		if(gbit_true(other.Align, ::gpk::ALIGN_BOTTOM	) && gbit_false(other.Align, ::gpk::ALIGN_VCENTER)) {
			controlMetrics.Total.Global.Offset.y							= otherMetrics.Total.Global.Offset.y - controlMetrics.Total.Global.Size.y;
			controlMetrics.Client.Global.Offset.y							= (int16_t)(controlMetrics.Total.Global.Offset.y + ncSizesScaled.Top);
		} else {
			controlMetrics.Total.Global.Offset.y							= otherMetrics.Total.Global.Offset.y + otherMetrics.Total.Global.Size.y;
			controlMetrics.Client.Global.Offset.y							= (int16_t)(controlMetrics.Total.Global.Offset.y + ncSizesScaled.Top);
		}
	}
	if(dockToControl.Left	!= -1) {
		gpk_necall(::gpk::controlInvalid(gui, dockToControl.Left	), "Invalid control id: %i.", dockToControl.Left);
		::gpk::controlUpdateMetricsTopToDown(gui, dockToControl.Left, targetSize.Cast<uint32_t>(), true);
		const ::gpk::SControl												& other													= gui.Controls.Controls	[dockToControl.Left];
		const ::gpk::SControlMetrics										& otherMetrics											= gui.Controls.Metrics	[dockToControl.Left];
		if(gbit_true(other.Align, ::gpk::ALIGN_RIGHT) && gbit_false(other.Align, ::gpk::ALIGN_HCENTER)) {
			controlMetrics.Total	.Global.Offset.x						= otherMetrics				.Total.Global.Offset.x + otherMetrics.Total.Global.Size.x - controlMetrics.Total.Global.Size.x;
			controlMetrics.Client	.Global.Offset.x						= (int16_t)(controlMetrics	.Total.Global.Offset.x + ncSizesScaled.Left);
		}
		else {
			controlMetrics.Total	.Global.Offset.x						= otherMetrics				.Total.Global.Offset.x;
			controlMetrics.Client	.Global.Offset.x						= (int16_t)(controlMetrics	.Total.Global.Offset.x + ncSizesScaled.Left);
		}
	}
	if(dockToControl.Top	!= -1) {
		gpk_necall(::gpk::controlInvalid(gui, dockToControl.Top), "Invalid control id: %i.", dockToControl.Top);
		const ::gpk::SControl												& other													= gui.Controls.Controls	[dockToControl.Top ];
		const ::gpk::SControlMetrics										& otherMetrics											= gui.Controls.Metrics	[dockToControl.Top ];
		if(gbit_true(other.Align, ::gpk::ALIGN_BOTTOM	) && gbit_false(other.Align, ::gpk::ALIGN_VCENTER)) {
			controlMetrics.Total.Global.Offset.y							= otherMetrics.Total.Global.Offset.y - controlMetrics.Total.Global.Size.y;
			controlMetrics.Client.Global.Offset.y							= controlMetrics.Total.Global.Offset.y + ncSizes.Top ;
		}
		else {
			controlMetrics.Total.Global.Offset.y							= otherMetrics.Total.Global.Offset.y + controlMetrics.Total.Global.Offset.y;
			controlMetrics.Client.Global.Offset.y							= controlMetrics.Total.Global.Offset.y + ncSizes.Top ;
		}
	}
	{ // calculate text rectangle
		const ::gpk::SRectangle2<int16_t>									& targetRect											= controlMetrics.Client.Global;
		controlMetrics.Text.Offset										= {};
		controlMetrics.Text.Size										= rectText.Size.Cast<int16_t>();
		::gpk::realignRectangle(targetRect.Size.Cast<uint32_t>(), controlMetrics.Text, controlMetrics.Text, controlText.Align);
		controlMetrics.Text.Offset										+= controlMetrics.Client.Global.Offset.Cast<int16_t>();
	}
	::buildControlGeometry(control, controlMetrics, gui.Zoom, controlMetrics.Rectangles, controlMetrics.Triangles);
	controlState.Updated											= true;
	return 0;
}

			::gpk::error_t										gpk::controlUpdateMetricsTopToDown							(::gpk::SGUI& gui, int32_t iControl, const ::gpk::SCoord2<uint32_t> & targetSize, bool forceUpdate)				{
	if(false == gui.Controls.States[iControl].Updated || forceUpdate)
		gpk_necall(::controlUpdateMetrics(gui, iControl, targetSize), "%s", "Unknown error! Maybe the control tree got broken?");
	::gpk::view_array<int32_t>											& children												= gui.Controls.Children[iControl];
	for(uint32_t iChild = 0; iChild < children.size(); ++iChild)
		gpk_necall(::gpk::controlUpdateMetricsTopToDown(gui, children[iChild], targetSize, forceUpdate), "%s", "Unknown error! Maybe the control tree got broken?");
	return 0;
}

			::gpk::error_t										gpk::guiUpdateMetrics									(::gpk::SGUI& gui, const ::gpk::SCoord2<uint32_t> & targetSize, bool forceUpdate)								{
	for(uint32_t iControl = 0; iControl < gui.Controls.Controls.size(); ++iControl)
		if(::gpk::controlInvalid(gui, gui.Controls.Controls[iControl].IndexParent) && false == ::gpk::controlInvalid(gui, iControl))
			gpk_necall(::gpk::controlUpdateMetricsTopToDown(gui, iControl, targetSize, forceUpdate), "%s", "Unknown error! Maybe the control tree got broken?");
	return 0;
}

static		::gpk::error_t										updateGUIControlHovered									(::gpk::SControlState& controlFlags, const ::gpk::SInput& inputSystem, bool disabled)								noexcept	{
	if(controlFlags.Hover) {
		if(inputSystem.ButtonDown(0) && false == controlFlags.Pressed)
			controlFlags.Pressed											= true;
		else {
			if(inputSystem.ButtonUp(0)) {
				controlFlags.Released											= true;
				if(controlFlags.Pressed) {
					controlFlags.Execute											= true;
					controlFlags.Pressed											= false;
				}
			}
		}
	}
	else
		controlFlags.Hover												= false == disabled;//controlFlags.Disabled;
	return one_if(controlFlags.Hover);
}

static		::gpk::error_t										controlProcessInput										(::gpk::SGUI& gui, const ::gpk::SInput& input, int32_t iControl)														{
	::gpk::SControlState												& controlState											= gui.Controls.States[iControl];
	//--------------------
	::gpk::error_t														controlHovered											= -1;
	if(::gpk::in_range(gui.CursorPos.Cast<int16_t>(), gui.Controls.Metrics[iControl].Total.Global)) {
		if(false == gui.Controls.Modes[iControl].Design) {
			controlHovered													= iControl;
			::updateGUIControlHovered(controlState, input,  ::gpk::controlDisabled(gui, iControl));
		}
	}
	else {
		if (controlState.Hover) {
			controlState.Hover												= false;
			controlState.UnHover											= true;
		}

		if(input.ButtonUp(0) && controlState.Pressed)
			controlState.Pressed											= false;
	}
	{
		::gpk::view_array<int32_t>											& children													= gui.Controls.Children[iControl];
		for(uint32_t iChild = 0, countChild = children.size(); iChild < countChild; ++iChild) {
			if(::gpk::controlHidden(gui, children[iChild]))
				continue;
			::gpk::error_t														controlPressed												= ::controlProcessInput(gui, input, children[iChild]);
			if(gui.Controls.Controls.size() > (uint32_t)controlPressed) {
				controlState.Hover												= false;
				//controlState.Pressed											= false;
				controlHovered													= controlPressed;
			}
		}
	}
	return controlHovered;
}

			::gpk::error_t										gpk::guiProcessInput									(::gpk::SGUI& gui, const ::gpk::SInput& input, const ::gpk::view_array<::gpk::SSysEvent> & sysEvents)	{
	gerror_if(errored(::gpk::guiUpdateMetrics(gui, gui.LastSize, false)), "%s", "Why would this ever happen?");
	::gpk::error_t														controlHovered											= -1;
	::gpk::array_pod<uint32_t>											rootControlsToProcess									= {};
	rootControlsToProcess.resize(1000);
	rootControlsToProcess.clear();
	(void)sysEvents;
	for(uint32_t iControl = 0, countControls = gui.Controls.Controls.size(); iControl < countControls; ++iControl) {	// Only process root parents
		::gpk::SControlState												& controlState											= gui.Controls.States[iControl];
		if(controlState.Unused || controlState.Disabled)
			continue;

		// Clear events that only last one tick.
		if (controlState.Execute	) controlState.Execute					= false;
		if (controlState.Released	) controlState.Released					= false;
		if (controlState.UnHover	) controlState.UnHover					= false;

		::gpk::SControl														& control												= gui.Controls.Controls[iControl];
		if(false == ::gpk::controlInvalid(gui, control.IndexParent))
			continue;
		rootControlsToProcess.push_back(iControl);
	}

	gui.CursorPos													+= {(float)input.MouseCurrent.Deltas.x, (float)input.MouseCurrent.Deltas.y};
	for(uint32_t iControl = 0, countControls = rootControlsToProcess.size(); iControl < countControls; ++iControl) {
		if(::gpk::controlHidden(gui, rootControlsToProcess[iControl]))
			continue;
		::gpk::error_t														controlPressed											= ::controlProcessInput(gui, input, rootControlsToProcess[iControl]);
		if(gui.Controls.Controls.size() > (uint32_t)controlPressed)
			controlHovered													= controlPressed;
	}
	if(controlHovered == -1)
		return gui.Controls.Controls.size();

	for(uint32_t iControl = 0, countControls = gui.Controls.Controls.size(); iControl < countControls; ++iControl) {
		if(iControl != (uint32_t)controlHovered) {
			::gpk::SControlState												& controlState											= gui.Controls.States[iControl];
			controlState.Hover												= false;
			if(0 == input.MouseCurrent.ButtonState[0])
				controlState.Pressed											= false;
		}
		//else {
		//	verbose_printf("Hovered: %u.", iControl);
		//}
	}
	return controlHovered;
}

			::gpk::error_t										gpk::guiDeselect										(::gpk::SGUI& gui)	{
	for(uint32_t iControl = 0; iControl < gui.Controls.States.size(); ++iControl) {
		gui.Controls.States[iControl].Selected						= false;
	}
	return 0;
}

			::gpk::error_t										gpk::guiSelect											(::gpk::SGUI& gui, int32_t controlToSelect)	{
	for(uint32_t iControl = 0; iControl < gui.Controls.States.size(); ++iControl) {
		gui.Controls.States[iControl].Selected						= controlToSelect == (int32_t)iControl;
	}
	return 0;
}

			::gpk::error_t										gpk::controlHidden										(const ::gpk::SGUI& gui, int32_t iControl)	{
	bool																imHidden												= ::gpk::controlInvalid(gui, iControl) || gui.Controls.States[iControl].Hidden;
	return imHidden ? imHidden : (false == ::gpk::controlInvalid(gui, gui.Controls.Controls[iControl].IndexParent) && ::gpk::controlHidden(gui, gui.Controls.Controls[iControl].IndexParent));
}

			::gpk::error_t										gpk::controlDisabled									(const ::gpk::SGUI& gui, int32_t iControl)	{
	bool																imDisabled												= ::gpk::controlInvalid(gui, iControl) || gui.Controls.States[iControl].Disabled;
	return imDisabled ? imDisabled : (false == ::gpk::controlInvalid(gui, gui.Controls.Controls[iControl].IndexParent) && ::gpk::controlDisabled(gui, gui.Controls.Controls[iControl].IndexParent));
}

			::gpk::error_t										gpk::controlMetricsInvalidate							(::gpk::SGUI& gui, int32_t iControl)	{
	::gpk::SControlState												& controlState											= gui.Controls.States[iControl];
	controlState.Updated											= false;
	const ::gpk::view_array<int32_t>									& controlChildren										= gui.Controls.Children[iControl];
	for(uint32_t iChild = 0, countChild = controlChildren.size(); iChild < countChild; ++iChild)
		gpk_necall(::gpk::controlMetricsInvalidate(gui, controlChildren[iChild]), "%s", "Invalid child?");
	return 0;
}

			::gpk::error_t										gpk::guiGetProcessableControls							(::gpk::SGUI& gui, ::gpk::array_pod<uint32_t>& controlIndices)													{
	for(uint32_t iControl = 0, countControls = gui.Controls.Controls.size(); iControl < countControls; ++iControl) {	// Only process root parents
		const ::gpk::SControlState											& controlState											= gui.Controls.States[iControl];
		if(controlState.Unused || gui.Controls.Modes[iControl].Design || ::gpk::controlDisabled(gui, iControl) || ::gpk::controlHidden(gui, iControl))
			continue;
		gpk_necall(controlIndices.push_back(iControl), "%s", "Out of memory?");
	}
	return controlIndices.size();
}

			::gpk::error_t										gpk::controlTextSet										(::gpk::SGUI& gui, int32_t iControl, const ::gpk::view_const_string& text)				{
	::gpk::view_const_string											& oldText												= gui.Controls.Text[iControl].Text;
	if(text.begin	() != oldText.begin()
	 || text.size	() != oldText.size()
	 ) {
		oldText															= text;
		gui.Controls.States[iControl].Updated							= false;
	}
	return 0;
}

			::gpk::error_t										gpk::controlFontSet										(::gpk::SGUI& gui, int32_t iControl, int16_t iFont)				{
	int16_t																& oldText												= gui.Controls.Text[iControl].FontSelected;
	if(iFont != oldText) {
		oldText															= iFont;
		gui.Controls.States[iControl].Updated							= false;
	}
	return 0;
}

